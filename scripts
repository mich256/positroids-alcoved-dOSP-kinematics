load('alcoved.sage')

#pi = DecoratedPermutation([1,3,2],[0]*3)
pi = DecoratedPermutation([3,1,6,5,2,4],[0]*6)
G = DP_to_GN(pi); G
BDP = GN_to_bdp(G); BDP
P = Positroid(G)
P.cover_stats()
P.cover_no()
trueP = P.projected_polytope
load('hstar.sage')
trueP.volume()
trueP.h_star_vector()

R = RootSystem(['A', 5])
Q = AlcovedPolytope(R, BDP)

R = RootSystem(['A',3])
theta = R.root_space().highest_root()
bdp = {theta: [1,2]}
for sr in R.root_space().simple_roots():
	bdp[sr] = [0,1]
Q = AlcovedPolytope(R, bdp)
qb = Q.quotient_basis
foo = []
for i in (1..3):
	for j in (1..3):
		for k in (1..3):
			rhoh = i*qb[0]+j*qb[1]+k*qb[2]
			if Q.is_member(rhoh):
				foo.append(rhoh)
foo

trueP = P.projected_polytope
load('hstar.sage')
trueP.volume()
trueP.h_star_vector()
R = RootSystem(['B',4])
W = WeylGroup(['B',4])
A = W.domain().simple_roots()
w = W[5]
alpha = R.root_space().simple_roots()[2]
alpha = R_to_W(R,alpha)
beta = R.root_space().roots()[6]
inv(R,w,alpha)
cdes(R,w)
cdes_wrt_root(R,w,beta)

for dp in gen_dec_perm(5):
	gn = DP_to_GN(dp)
	P = Positroid(gn)
	M = P.all_members()
	if len(M) != 0:
		P.graph_dict()
		P.gen_graph()

dp = DecoratedPermutation([5,6,1,2,3,4],[0,0,0,0,0,0])
gn = DP_to_GN(dp)
P = Positroid(gn)
P.gen_graph()


pi = DecoratedPermutation([2,4,1,5,3],[0,0,0,0,0])
gn = DP_to_GN(pi)
P = Positroid(gn)
P.polytope.Hrepresentation()
matrix(P.polytope.Hrepresentation())

P1 = Polyhedron(ieqs = [(1,-1,0,0,0,0),(-1,1,0,0,0,0)])
int1 = P.polytope & P1
int1.plot()
h_star_polynomial(int1)
# 1+t

P2 = Polyhedron(ieqs = [(1,0,-1,0,0,0),(-1,0,1,0,0,0)])
int2 = P.polytope & P2
int2.plot()	
h_star_polynomial(int2)
#1+t


P3 = Polyhedron(ieqs = [(1,0,0,0,-1,0),(-1,0,0,0,1,0)])
int3 = P.polytope & P3
int3.plot()
int3.Hrepresentation()		
h_star_polynomial(int3)
#1+t


P4 = Polyhedron(ieqs = [(2,-1,-1,-1,0,0),(-2,1,1,1,0,0)])
int4 = P.polytope & P4
int4.plot()
int4.Hrepresentation()		
h_star_polynomial(int4)
#1+2*t

int13 = P.polytope & P1 & P3
dim(int13)
int13.plot()
h_star_polynomial(int13)
# dim = 2
# 1

int23 = P.polytope & P2 & P3
int23.plot()
h_star_polynomial(int23)
#1

int14 = P.polytope & P1 & P4
int14.plot()
h_star_polynomial(int14)
#1+t

int24 = P.polytope & P2 & P4
int24.plot()
h_star_polynomial(int24)
#1+t

int34 = P.polytope & P3 & P4
int34.plot()
h_star_polynomial(int34)
#1

int134 = P.polytope & P1 & P3 & P4
int134.plot()
h_star_polynomial(int134)
#1

int234 = P.polytope & P2 & P3 & P4
int234.plot()
h_star_polynomial(int234)
#1

pi = DecoratedPermutation([2,4,1,3],[0,0,0,0])
gn = DP_to_GN(pi)
P = Positroid(gn)
P.polytope.Hrepresentation()
matrix(P.polytope.Hrepresentation())

P1 = Polyhedron(ieqs = [(2,-1,-1,-1,0),(-2,1,1,1,0)])
int1 = P.polytope & P1
int1.plot()
h_star_polynomial(int1)
#1
#dim =2

P2 = Polyhedron(ieqs = [(1,-1,0,0,0),(-1,1,0,0,0)])
int2 = P.polytope & P2
int2.plot()
h_star_polynomial(int2)
# 1
# dim = 2

P3 = Polyhedron(ieqs = [(1,0,-1,0,0),(-1,0,1,0,0)])
int3 = P.polytope& P3
int3.plot()
h_star_polynomial(int3)
# 1
# dim = 2

int12 = P.polytope & P1 & P2
int12.plot()
h_star_polynomial(int12)
# 1
# dim = 1

int13 = P.polytope & P1 & P3
int13.plot()
h_star_polynomial(int13)
# 1
# dim = 1

int23 = P.polytope & P2 & P3
int23.plot()
h_star_polynomial(int23)
# dim = 0
# 1

W = WeylGroup(['G',2])
P = Polyhedron(ieqs = [(0,1,1,1),(0,-1,-1,-1)], backend='normaliz')
P1 = Polyhedron(ieqs = [(0,0,0,1),(0,0,0,-1)], backend='normaliz')
Q1 = hypersimplex(W,1).polytope
(P & Q1).plot()
(P & Q1).vertices()
(P & Q1).ehrhart_quasipolynomial()
(P & Q1).affine_hull_projection().volume()
Q2 = hypersimplex(W,2).polytope
(P & Q2).plot()
(P & Q2).ehrhart_quasipolynomial()

W = WeyGroup(['E',6])
P = Polyhedron(ieqs = [(0,0, 0, 0, 0, 0, 1, 0, 1),(0,0, 0, 0, 0, 0, -1, 0,-1),(0, 0, 0, 0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 0, 0, 0, -1, -1)], backend='normaliz')

#type G2
P1 = Polyhedron(vertices = [[0,0,0],[2/3,-1/3,-1/3],[1/2,0,-1/2]], backend='normaliz')
P2 = Polyhedron(vertices = [[0,0,0],[2/3,-1/3,-1/3],[1/2,0,-1/2],[1/6,-1/3,1/6]], backend='normaliz')

#type F4
P1 = Polyhedron(vertices = [[1/2,0,0,0],[1/2,1/6,1/6,1/6],[1/2,1/4,1/4,0],[1/2,1/2,0,0]],backend='normaliz')




